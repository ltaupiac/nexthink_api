{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"nexthink_api Simplified Access and Integration with Nexthink APIs <p>This Python package provides easy access to Nexthink APIs, simplifying the integration and use of Nexthink\u2019s features in your applications.</p>"},{"location":"#informations","title":"Informations","text":"<p>This package relies on the Nexthink documentation</p> <ul> <li>Nexthink API documentation</li> </ul> <p>Class specifications are based on the YAML documentation of each API.</p> <ul> <li>Yaml Enrichment specifications</li> <li>Yaml Nql specifications</li> <li>Yaml Act specifications</li> <li>Yaml Engage specifications</li> <li>Yaml Workflow specifications</li> </ul> <p>Warning</p> <p>The development of this package is still in its early stages. Currently, only the Enrichment and Nql parts are available. Please be aware that there may still be bugs.</p>"},{"location":"#parts-to-come","title":"parts to come","text":"<ul> <li>Act</li> <li>Engage</li> <li>Workflow</li> <li>Audit Trails</li> </ul>"},{"location":"Enrichment/","title":"Enrichment classes","text":""},{"location":"Enrichment/#nexthink_api.Enrichment","title":"<code>nexthink_api.Enrichment</code>","text":"<p>Classes necessary to represent and manipulate objects used in the Nexthink Enrichment API.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtBadRequestResponse","title":"<code>NxtBadRequestResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Error response when ALL objects in the request contain errors.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtBadRequestResponse--attributes","title":"Attributes","text":"<p>status : Literal     Literal value \"error\" representing the status of the response. errors : list[NxtIndividualObjectError]     List containing NxtIndividualObjectError instances with a minimum length of 1.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtBadRequestResponse.status","title":"<code>status: Literal['error'] = Field(default='error')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtBadRequestResponse.errors","title":"<code>errors: conlist(NxtIndividualObjectError, min_length=1)</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichment","title":"<code>NxtEnrichment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Enrichment class.</p> <p>Enrichment composed of the identification information of the desired object and the fields to be enriched (names and values).</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichment--attributes","title":"Attributes","text":"<pre><code>    identification : List[NxtIdentification])\n        List containing one NxtIdentification object for identification purposes.\n    fields : List[NxtField]\n        List of NxtField objects to be enriched.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichment.identification","title":"<code>identification: conlist(NxtIdentification, min_length=1, max_length=1)</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichment.fields","title":"<code>fields: conlist(NxtField, min_length=1)</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichmentRequest","title":"<code>NxtEnrichmentRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Objects to be enriched (with desired fields and values) and domain (configurable) .</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichmentRequest--attributes","title":"Attributes","text":"<pre><code>enrichments : list[NxtEnrichment]\n    A list of NxtEnrichment objects to be enriched.\ndomain : str\n    The domain for the enrichment process. For information and tracking purposes mainly\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichmentRequest.enrichments","title":"<code>enrichments: conlist(NxtEnrichment, min_length=1, max_length=5000)</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtEnrichmentRequest.domain","title":"<code>domain: str = Field(min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtError","title":"<code>NxtError</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>hold an Error with a message and a code.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtError--attributes","title":"Attributes","text":"<p>message: str     Message with the description of the error code: str     Error code</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtError.message","title":"<code>message: str = Field(min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtError.code","title":"<code>code: str = Field(min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField","title":"<code>NxtField</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Enrichment information for the given object, composed of the name of field to be enriched and the desired value.</p> <p>Ensures constraints on the 'name' attribute based on the presence of '#' character. Raises ValueError if constraints are violated. Converts 'name' attribute to a string when converting to a dictionary.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.value","title":"<code>value: Union[str, int]</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.custom_value","title":"<code>custom_value: str = Field(default=None, exclude=True, repr=False)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.name","title":"<code>name(value: NxtFieldName) -&gt; str</code>","text":"<p>Return the value of the 'name' attribute when converting to a dictionary.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.name--parameters","title":"Parameters","text":"<p>value : NxtFieldName     Enum from which we must get the name</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.name--returns","title":"Returns","text":"<pre><code>str\n    The value of the 'name' attribute.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.check_name","title":"<code>check_name() -&gt; Self</code>","text":"<p>Validate the 'name' attribute of the model after it has been instantiated.</p> <p>if value contains '#', then customValue must be specified. if value doesn't contain '#', then customValue must not be None.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.check_name--raises","title":"Raises","text":"<pre><code>ValueError\n    If condition on 'customValue' is violated.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.check_name--returns","title":"Returns","text":"<pre><code>Self: The instance of the model.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.get_field_name","title":"<code>get_field_name(name: NxtFieldName) -&gt; str</code>","text":"<p>Format the Enrichment field name with custom value if required.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.get_field_name--parameters","title":"Parameters","text":"<p>name : NxtFieldName     Field to Enrich.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtField.get_field_name--returns","title":"Returns","text":"<pre><code>str\n    The Enrich field value, followed by # and custom value for custom Field.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName","title":"<code>NxtFieldName</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration class for various field names related to virtualization and custom entities.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.DESKTOP_POOL","title":"<code>DESKTOP_POOL = 'device/device/virtualization/desktop_pool'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.HOSTNAME","title":"<code>HOSTNAME = 'device/device/virtualization/hostname'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.HYPERVISOR_NAME","title":"<code>HYPERVISOR_NAME = 'device/device/virtualization/hypervisor_name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.TYPE","title":"<code>TYPE = 'device/device/virtualization/type'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.ENVIRONMENT_NAME","title":"<code>ENVIRONMENT_NAME = 'device/device/virtualization/environment_name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.DESKTOP_BROKER","title":"<code>DESKTOP_BROKER = 'device/device/virtualization/desktop_broker'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.DISK_IMAGE","title":"<code>DISK_IMAGE = 'device/device/virtualization/disk_image'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.LAST_UPDATE","title":"<code>LAST_UPDATE = 'device/device/virtualization/last_update'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.CUSTOM_DEVICE","title":"<code>CUSTOM_DEVICE = 'device/device/#{}'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.CUSTOM_USER","title":"<code>CUSTOM_USER = 'user/user/#{}'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.CUSTOM_BINARY","title":"<code>CUSTOM_BINARY = 'binary/binary/#{}'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtFieldName.CUSTOM_PACKAGE","title":"<code>CUSTOM_PACKAGE = 'package/package/#{}'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtForbiddenResponse","title":"<code>NxtForbiddenResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Error response when no permissions.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtForbiddenResponse--attributes","title":"Attributes","text":"<p>message : str     Message describing the error.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtForbiddenResponse.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification","title":"<code>NxtIdentification</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>IdentIdentification info for the given object, including the field name and its value.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification--attributes","title":"Attributes","text":"<pre><code>name : NxtIdentificationName\n    The name of the identification field.\nvalue : str\n    The value used to identify the object.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.value","title":"<code>value: str</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.name","title":"<code>name(value: NxtIdentificationName) -&gt; str</code>","text":"<p>Serialize the 'name' field when used in JSON.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.name--parameters","title":"Parameters","text":"<p>value : NxtIdentificationName     Name of the field to be used to identify the object.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.name--returns","title":"Returns","text":"<pre><code>str\n    string value of the name field\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.validate_name","title":"<code>validate_name(value: Union[str, NxtIdentificationName]) -&gt; NxtIdentificationName</code>  <code>classmethod</code>","text":"<p>Convert value to NxtIdentification if needed.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.validate_name--parameters","title":"Parameters","text":"<p>value : Union [str, NxtIdentificationName]     Name of the field to be used to identify the object.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.validate_name--returns","title":"Returns","text":"<pre><code>NxtIdentificationName\n    Name of the field to be used to identify the object.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.check_non_empty","title":"<code>check_non_empty(v: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Ensure value is not empty.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.check_non_empty--parameters","title":"Parameters","text":"<p>v : str     value to be used to identify the object.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.check_non_empty--returns","title":"Returns","text":"<pre><code>str\n    string value of the name field.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentification.check_non_empty--raises","title":"Raises","text":"<pre><code>ValueError\n     if value is empty.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName","title":"<code>NxtIdentificationName</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration for allowed identification field names.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.DEVICE_DEVICE_NAME","title":"<code>DEVICE_DEVICE_NAME = 'device/device/name'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.DEVICE_DEVICE_UID","title":"<code>DEVICE_DEVICE_UID = 'device/device/uid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.USER_USER_SID","title":"<code>USER_USER_SID = 'user/user/sid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.USER_USER_UID","title":"<code>USER_USER_UID = 'user/user/uid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.USER_USER_UPN","title":"<code>USER_USER_UPN = 'user/user/upn'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.BINARY_BINARY_UID","title":"<code>BINARY_BINARY_UID = 'binary/binary/uid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIdentificationName.PACKAGE_PACKAGE_UID","title":"<code>PACKAGE_PACKAGE_UID = 'package/package/uid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIndividualObjectError","title":"<code>NxtIndividualObjectError</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Error for an individual object, composed of identification information about the object and the list of errors.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIndividualObjectError--attributes","title":"Attributes","text":"<pre><code>identification : [NxtIdentification]\n    List containing a single NxtIdentification instance.\nerrors : list[NxtError]\n    List containing NxtError instances.\nmodel_config : ConfigDict\n    Configuration dictionary allowing arbitrary types.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIndividualObjectError.identification","title":"<code>identification: conlist(NxtIdentification, min_length=1, max_length=1) = Field(default_factory=lambda: [NxtIdentification(name=NxtIdentificationName(value='default_name'), value='default_value')])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIndividualObjectError.errors","title":"<code>errors: conlist(NxtError, min_length=1) = Field(default_factory=lambda: [NxtError(message='default_message', code='default_value')])</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtIndividualObjectError.model_config","title":"<code>model_config = ConfigDict(arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtPartialSuccessResponse","title":"<code>NxtPartialSuccessResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Partial success response when some of the objects in the request contain errors but other objects are processed.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtPartialSuccessResponse--attributes","title":"Attributes","text":"<pre><code>status  : Literal[\"partial_success\"]\n    Indicates the status of the response as 'partial_success'.\nerrors : list[NxtIndividualObjectError]\n    List containing NxtIndividualObjectError instances representing the errors in the request.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtPartialSuccessResponse.status","title":"<code>status: Literal['partial_success'] = Field(default='partial_success')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtPartialSuccessResponse.errors","title":"<code>errors: conlist(NxtIndividualObjectError, min_length=1)</code>  <code>instance-attribute</code>","text":""},{"location":"Enrichment/#nexthink_api.Enrichment.NxtSuccessResponse","title":"<code>NxtSuccessResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response when ALL objects have been processed correctly.</p>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtSuccessResponse--attributes","title":"Attributes","text":"<pre><code>status : Literal[\"success\"]\n    Indicate the success status of the response.\n</code></pre>"},{"location":"Enrichment/#nexthink_api.Enrichment.NxtSuccessResponse.status","title":"<code>status: Literal['success'] = Field(default='success')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/","title":"Nql Classes","text":""},{"location":"Nql/#nexthink_api.Nql","title":"<code>nexthink_api.Nql</code>","text":"<p>Classes in the module.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime","title":"<code>NxtDateTime</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Datetime class object for NQL answer.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime--attributes","title":"Attributes","text":"<pre><code>year : int\n    year (2 or 4 digits).\nmonth : int\n    month (1-12).\nday : int\n    day (1-31).\nhour : int\n    hour (0-23).\nminute : int\n    minute (0-59).\nsecond : int\n    second (0-59).\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime--raises","title":"Raises","text":"<pre><code>ValueError\n    when year is not 2-digits or 4-digit number.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.year","title":"<code>year: Annotated[int, Field(strict=True)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.month","title":"<code>month: Annotated[int, Field(strict=True, ge=1, le=12)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.day","title":"<code>day: Annotated[int, Field(strict=True, ge=1, le=31)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.hour","title":"<code>hour: Annotated[int, Field(strict=True, ge=0, le=23)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.minute","title":"<code>minute: Annotated[int, Field(strict=True, ge=0, le=59)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.second","title":"<code>second: Annotated[int, Field(strict=True, ge=0, le=59)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.validate_year","title":"<code>validate_year(value: int) -&gt; int</code>  <code>classmethod</code>","text":"<p>Ensure year is 2-digit or 4-digit.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.validate_year--parameters","title":"Parameters","text":"<pre><code>value : int\n    year to validate.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.validate_year--returns","title":"Returns","text":"<pre><code>int\n    valid year.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.validate_year--raises","title":"Raises","text":"<pre><code>ValueError\n    when year is not 2-digits or 4-digit number.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtDateTime.validate_date","title":"<code>validate_date() -&gt; Self</code>","text":"<p>Verify is a date can be created with these parameters.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtErrorResponse","title":"<code>NxtErrorResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An error response for NQL request.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtErrorResponse--attributes","title":"Attributes","text":"<pre><code>message: str\n    Message with the description of the error\ncode: int\n    Error code\nsource: Optional[str]\n    Source of the error, if any\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtErrorResponse.message","title":"<code>message: str</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtErrorResponse.code","title":"<code>code: int</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtErrorResponse.source","title":"<code>source: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteRequest","title":"<code>NxtNqlApiExecuteRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Represent a NQL request object.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteRequest--attributes","title":"Attributes:","text":"<p>queryId : str     Identifier of the query which is going to be executed. parameters : dict[str, str]     The parameters of the query.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteRequest--note","title":"Note:","text":"<p>The queryId is a string, with a maximum length of 255 characters, composed of alphanumeric characters (a-z, A-Z, 0-9), underscores (_), and start with a sharp character (#).</p> <p>The parameters is a dictionary of string keys and string values.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteRequest.queryId","title":"<code>queryId: Annotated[str, Field(min_length=2, pattern='^#[a-z0-9_]{1,255}$')]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteRequest.parameters","title":"<code>parameters: dict[str, str] = Field(default={})</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse","title":"<code>NxtNqlApiExecuteResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>NQL Class answer object for V1 request.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse--parameters","title":"Parameters","text":"<pre><code>queryId: str\n    Identifier of the executed query.\nexecutedQuery: str\n    Final query executed with the replaced parameters.\nrows: int\n    Number of rows returned\nexecutionDateTime: NxtDateTime\n    Date and time of the execution\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse.queryId","title":"<code>queryId: str</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse.executedQuery","title":"<code>executedQuery: str</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse.rows","title":"<code>rows: NonNegativeInt</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse.executionDateTime","title":"<code>executionDateTime: NxtDateTime</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse.headers","title":"<code>headers: list[str]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteResponse.data","title":"<code>data: list[list]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExportResponse","title":"<code>NxtNqlApiExportResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Class for the NQL API export response.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExportResponse--attributes","title":"Attributes","text":"<p>exportId : str     Identifier of the query which is going to be executed.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExportResponse.exportId","title":"<code>exportId: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse","title":"<code>NxtNqlApiStatusResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response status of an NQL API request.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse--attributes","title":"Attributes","text":"<pre><code>status : NxtNqlStatus\n    Status of the NQL API request.\nresultsFileUrl : Optional[HttpUrl]\n    URL of the file with the content once the export has been completed.\nerrorDescription : Optional[str]\n    Message with the description of the error.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse.status","title":"<code>status: NxtNqlStatus</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse.resultsFileUrl","title":"<code>resultsFileUrl: Optional[HttpUrl] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse.errorDescription","title":"<code>errorDescription: Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse.serialize_status","title":"<code>serialize_status(value: NxtNqlStatus) -&gt; str</code>","text":"<p>Serialize the status attribute to its value when used in JSON format.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse.serialize_status--parameters","title":"Parameters","text":"<pre><code>value : NxtNqlStatus\n    Value to be serialized.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiStatusResponse.serialize_status--returns","title":"Returns","text":"<pre><code>str\n    Serialized value of the status attribute.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlStatus","title":"<code>NxtNqlStatus</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>NQL Status response state.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlStatus.SUBMITTED","title":"<code>SUBMITTED = 'SUBMITTED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlStatus.IN_PROGRESS","title":"<code>IN_PROGRESS = 'IN_PROGRESS'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlStatus.ERROR","title":"<code>ERROR = 'ERROR'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlStatus.COMPLETED","title":"<code>COMPLETED = 'COMPLETED'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response","title":"<code>NxtNqlApiExecuteV2Response</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>NQL API execute V2 response.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response--attributes","title":"Attributes","text":"<p>queryId : str     Identifier of the executed query. executedQuery : str     Final query executed with the replaced parameters. rows : int     Number of rows returned executionDateTime : str     Date and time of the execution in ISO 8601 format (YYYY-MM-DDThhss.sssTZD). data : List[dict[str, str]]     List of dictionaries representing the rows of the query result.</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.queryId","title":"<code>queryId: str</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.executedQuery","title":"<code>executedQuery: str</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.rows","title":"<code>rows: int</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.executionDateTime","title":"<code>executionDateTime: str</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.data","title":"<code>data: List[dict[str, str]]</code>  <code>instance-attribute</code>","text":""},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.parse_execution_datetime","title":"<code>parse_execution_datetime(value: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Parse the execution date time from ISO 8601 format (YYYY-MM-DDThhss.sssTZD).</p>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.parse_execution_datetime--parameters","title":"Parameters","text":"<pre><code>value (str): Value to be parsed.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.parse_execution_datetime--returns","title":"Returns","text":"<pre><code>str: Parsed datetime object.\n</code></pre>"},{"location":"Nql/#nexthink_api.Nql.NxtNqlApiExecuteV2Response.parse_execution_datetime--raises","title":"Raises","text":"<pre><code>ValueError: If the value is not in ISO 8601 format.\n</code></pre>"},{"location":"examples/","title":"Python Nexthink","text":"<p>This python library provides functionality to interact with  the Nexthink Infinity API.</p>"},{"location":"examples/#installation","title":"Installation","text":"<p>To install the Nexthink module with pip, use the following command:</p> <pre><code>pip install nexthink_api\n</code></pre>"},{"location":"examples/#usage","title":"Usage","text":""},{"location":"examples/#authentification","title":"authentification:","text":"<pre><code>from nexthink_api import NxtApiClient, NxtRegionName\n\n# Fill these in with your Nexthink environment details\nclient_id = 'your_client_id'\nclient_secret = 'your_client_secret'\ntenant = \"tenant_string\"\n# proxies = { https=os.getenv('https_proxy'), http=os.getenv('http_proxy')}\n\n# Create an instance of the client with the proxy parameters and credentials\nnxtClient = NxtApiClient(tenant, \n                         NxtRegionName.eu, \n                         client_id=client_id, \n                         client_secret=client_secret,\n                         # proxies=proxies       # If you need a proxy\n                         )\n</code></pre>"},{"location":"examples/#enrichment","title":"Enrichment:","text":"<pre><code>from datetime import datetime, timedelta\nfrom nexthink_api import (\n    NxtIdentification,\n    NxtIdentificationName,\n    NxtField,\n    NxtFieldName,\n    NxtEnrichment,\n    NxtEndpoint,\n    NxtEnrichmentRequest,\n)\n\n# Will update Custom Fields for PC12345\n# The 3 Custom Fields have been created before in Nexthink admin\n# For demo, the 3 CF are named cf_demo1, cf_demo2, cf_demo3\n\n# Data to set in CF\nnow = datetime.now()\ntomorrow = now + timedelta(days=1)\nyesterday = now - timedelta(days=1)\n\n# Identification of the device where CF will be updated\nidentification = NxtIdentification(name=NxtIdentificationName.DEVICE_DEVICE_NAME, value=\"PC12345\")\n\n# The 3 CF with  their value (value should be a string)\nfield1 = NxtField(name=NxtFieldName.CUSTOM_DEVICE, value=str(now), custom_value=\"cf_demo1\")\nfield2 = NxtField(name=NxtFieldName.CUSTOM_DEVICE, value=str(tomorrow), custom_value=\"cf_demo2\")\nfield3 = NxtField(name=NxtFieldName.CUSTOM_DEVICE, value=str(yesterday), custom_value=\"cf_demo3\")\n\n# Create the Enrichment record\nenrichments = [NxtEnrichment(identification=[identification], fields=[field1, field2, field3])]\n# Prepare the enrichment Request object\nenrichmentRequest = NxtEnrichmentRequest(enrichments=enrichments, domain=\"test_fdj\")\n\n# This is the way to see the json payload of the enrichment request \npayload = enrichmentRequest.model_dump()\nprint(payload)\n\n# use the client to run perform the enrichment on the Enrichment endpoint\nresponse = nxtClient.run_enrichment(endpoint=NxtEndpoint.Enrichment, data=enrichmentRequest)\nprint(response)\n</code></pre>"},{"location":"examples/#nql-requests","title":"NQL Requests:","text":"<ul> <li>NQL Queries are optimized for relatively small requests at a high frequency. </li> </ul> <p>The NQL query must have been previously created in the Nexthink admin (admin/NQL API queries) For the example, the NQL query ID will be #get_pilot_collector_devices</p> <p>The NQL query is : <pre><code>devices | where collector.update_group == 'Pilot'\n</code></pre></p> <pre><code>from nexthink_api import (\n    NxtNqlApiExecuteRequest,\n    NxtEndpoint\n)\n\n# Query ID\nMyRequestID = \"#get_pilot_collector_devices\"\n# Create a nql request object \nnqlRequest = NxtNqlApiExecuteRequest(queryId=MyRequestID)\n# Use the client to run the query on the Nql endpoint\nresponse = nxtClient.run_nql(NxtEndpoint.Nql, data=nqlRequest)\nprint(response.rows)\nprint(response.data)\n</code></pre>"},{"location":"examples/#nql-export","title":"NQL Export:","text":"<ul> <li>NQL Export are optimized for large queries at low frequency</li> </ul> <p>This request is asynchronous. You start the execution and get an exportID. You have to wait the end of export by querying the exportID status. Once the export is ready, you will get the S3 URL to download the export.</p> <p>The NQL query must have been previously created in the Nexthink admin (admin/NQL API queries) For the example, the NQL query ID will be #get_windows_devices.</p> <p>The NQL query is :  <pre><code>devices | where operating_system.platform == windows\n</code></pre> <pre><code>from nexthink_api import (\n    NxtNqlApiExecuteRequest,\n    NxtEndpoint,\n    NxtNqlApiExportResponse,\n    NxtErrorResponse\n)\n\n# Query ID\nMyRequestID = \"#get_pilot_collector_devices\"\n# Create a nql request object \nnqlRequest = NxtNqlApiExecuteRequest(queryId=MyRequestID)\n# This time, use the client to run the query on the NqlExport endpoint\nresponse = nxtClient.run_nql(NxtEndpoint.NqlExport, data=nqlRequest)\n# If response is NqlNqlApiExportResponse, there is no error\nif isinstance(response, NxtNqlApiExportResponse):\n    # Response will contain the exportID\n    print(response)\n    # The client can wait for end of query\n    response = nxtClient.wait_status(response)\n    # This response will contain the S3 URL\n    print(response)\n    # You can use the nxtClient to download the export\n    # The export will be a csv data \n    res = nxtClient.download_export(response)\n    # Print first 5 lines\n    first_lines = [ line for line in res.text.split('\\n')[:5]]\n    for line in first_lines:\n        print(line)\n# Probably an NxtErrorResponse\nelse:\n    print(response)\n</code></pre></p>"},{"location":"examples/#api-classes","title":"API Classes","text":"<p>All Classes of the nexthink_api are build with Pydantic, so they can be serialize to dict  with the method model_dump()</p> <p>In the same way, any serialized version of a class can be transformed into an object  with the model_validate(json_data) method.</p>"},{"location":"models/","title":"Response manager","text":""},{"location":"models/#nexthink_api.Models","title":"<code>nexthink_api.Models</code>","text":"<p>List of classes available in the module.</p>"},{"location":"models/#nexthink_api.Models.NxtRegionName","title":"<code>NxtRegionName</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>List of regions for Nexthink servers.</p>"},{"location":"models/#nexthink_api.Models.NxtRegionName.us","title":"<code>us = 'us'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtRegionName.eu","title":"<code>eu = 'eu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtRegionName.pac","title":"<code>pac = 'pac'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtRegionName.meta","title":"<code>meta = 'meta'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings","title":"<code>NxtSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration class for Nexthink API.</p> <p>This class is used by client during initialization.</p>"},{"location":"models/#nexthink_api.Models.NxtSettings--attributes","title":"Attributes","text":"<pre><code>instance : str\n    The name of the Nexthink instance.\nregion : NxtRegionName\n    The region of the Nexthink instance.\ninfinity_base_uri : HttpUrl\n    The base URI of the Nexthink API.\ntoken_url : HttpUrl\n    The URL of the token endpoint.\nproxies : Optional[dict]\n    A dictionary of proxies to use for the requests. Defaults to None.\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtSettings--note","title":"Note","text":"<ul> <li>if proxy are not provided, it will try to detect proxies from environment variables</li> <li>if no proxy are detected, it will disable the proxy</li> <li>false value disable the proxy</li> </ul>"},{"location":"models/#nexthink_api.Models.NxtSettings.base_url","title":"<code>base_url: Final = 'https://{instance}.api.{region}.nexthink.cloud'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings.instance","title":"<code>instance: str = Field(min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings.region","title":"<code>region: NxtRegionName</code>  <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings.infinity_base_uri","title":"<code>infinity_base_uri: HttpUrl = Field(init=False, default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings.token_url","title":"<code>token_url: HttpUrl = Field(init=False, default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings.proxies","title":"<code>proxies: Optional[Union[Dict[str, str], bool]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtSettings.set_infinity_base_uri","title":"<code>set_infinity_base_uri(values: dict) -&gt; dict</code>  <code>classmethod</code>","text":"<p>Set the base URI of the Nexthink API.</p>"},{"location":"models/#nexthink_api.Models.NxtSettings.set_infinity_base_uri--parameters","title":"Parameters","text":"<pre><code>values : dict\n    class attributes in dict format\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtSettings.set_infinity_base_uri--returns","title":"Returns","text":"<pre><code>dict\n    The validated and updated attributes in dict format.\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtSettings.set_infinity_base_uri--raises","title":"Raises","text":"<pre><code>ValueError\n    If instance or region are not provided.\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtSettings.set_settings_init","title":"<code>set_settings_init() -&gt; Self</code>","text":"<p>Finish the initialization of the settings object when class is instantiated.</p>"},{"location":"models/#nexthink_api.Models.NxtSettings.set_settings_init--returns","title":"Returns","text":"<pre><code>NxtSettings\n    the instantiated class\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtEndpoint","title":"<code>NxtEndpoint</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Endpoint list of the Nexthink API.</p>"},{"location":"models/#nexthink_api.Models.NxtEndpoint.Enrichment","title":"<code>Enrichment: Final[str] = '/api/v1/enrichment/data/fields'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.Act","title":"<code>Act: Final[str] = '/api/v1/act/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.Engage","title":"<code>Engage: Final[str] = '/api/v1/euf/campaign/trigger'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.Workflow","title":"<code>Workflow: Final[str] = '/api/v1/workflow/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.Nql","title":"<code>Nql: Final[str] = '/api/v1/nql/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.NqlV2","title":"<code>NqlV2: Final[str] = '/api/v2/nql/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.NqlExport","title":"<code>NqlExport: Final[str] = '/api/v1/nql/export'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.NqlStatus","title":"<code>NqlStatus: Final[str] = '/api/v1/nql/status'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.Token","title":"<code>Token: Final[str] = '/api/v1/token'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtEndpoint.get_api_name","title":"<code>get_api_name(path: str) -&gt; Optional[str]</code>  <code>classmethod</code>","text":"<p>Get the API name from the path.</p>"},{"location":"models/#nexthink_api.Models.NxtEndpoint.get_api_name--parameters","title":"Parameters","text":"<pre><code>path : str\n    path to the API.\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtEndpoint.get_api_name--returns","title":"Returns","text":"<pre><code>Optional[str]\n    The name of the API or None if path is not in the Endpoints list.\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtTokenRequest","title":"<code>NxtTokenRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for an OAuth Authentication request on the Nexthink API.</p>"},{"location":"models/#nexthink_api.Models.NxtTokenRequest--attributes","title":"Attributes","text":"<pre><code>data (Dict[str, str]):\n    Header for requesting the Token\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtTokenRequest.data","title":"<code>data: Dict[str, str] = Field(default={'grant_type': 'client_credentials'}, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtTokenRequest.get_request_header","title":"<code>get_request_header() -&gt; dict</code>","text":"<p>Return the header for requesting the token.</p>"},{"location":"models/#nexthink_api.Models.NxtTokenRequest.get_request_header--returns","title":"Returns","text":"<pre><code>dict(str, str):\n    Header for requesting the Token\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtInvalidTokenRequest","title":"<code>NxtInvalidTokenRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Error when authentication has failed.</p>"},{"location":"models/#nexthink_api.Models.NxtInvalidTokenRequest--attributes","title":"Attributes","text":"<pre><code>code: str\n    Error code\nmessage: str\n    Message with the description of the error\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtInvalidTokenRequest.code","title":"<code>code: str = Field(min_length=1, default=401)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtInvalidTokenRequest.message","title":"<code>message: str = Field(min_length=1, default='Unauthorized - invalid authentication credentials')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtTokenResponse","title":"<code>NxtTokenResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Nexthink API Token answer.</p>"},{"location":"models/#nexthink_api.Models.NxtTokenResponse--attributes","title":"Attributes","text":"<pre><code>token_type : str\n    The type of the token.\nexpires_in : int\n    The expiration time of the token.\naccess_token str\n    The access token.\nscope : str\n    The scope of the token.\n</code></pre>"},{"location":"models/#nexthink_api.Models.NxtTokenResponse.token_type","title":"<code>token_type: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtTokenResponse.expires_in","title":"<code>expires_in: Annotated[int, Field(ge=0)]</code>  <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtTokenResponse.access_token","title":"<code>access_token: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""},{"location":"models/#nexthink_api.Models.NxtTokenResponse.scope","title":"<code>scope: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_api_request/","title":"Request client","text":""},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient","title":"<code>nexthink_api.Clients.NxtApiClient</code>","text":"<p>Initializes a new instance of the NxtApiClient class.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient--parameters","title":"Parameters","text":"<pre><code>instance : str\n    The name of the Nexthink instance.\nregion : NxtRegionName\n    The region of the Nexthink instance.\nclient_id : str\n    The client ID for authentication.\nclient_secret : str\n    The client secret for authentication.\nproxies : Optional[dict]\n    A dictionary of proxies to use for the requests. Defaults to None.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient--note","title":"Note.","text":"<ul> <li>if proxy are not provided, it will try to detect proxies from environment variables</li> <li>if no proxy are detected, it will disable the proxy</li> <li>false value disable the proxy</li> </ul>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.settings","title":"<code>settings = NxtSettings(instance=instance, region=region, proxies=proxies)</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.endpoint","title":"<code>endpoint: NxtEndpoint</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.token","title":"<code>token: Union[NxtTokenResponse, None] = None</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.headers","title":"<code>headers = {}</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.init_token","title":"<code>init_token(client_id: str, client_secret: str) -&gt; None</code>","text":"<p>Initialize the token using the provided client ID and client secret.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.init_token--parameters","title":"Parameters","text":"<pre><code>client_id : str\n    The client ID.\nclient_secret : str\n    The client secret.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.init_token--returns","title":"Returns","text":"<pre><code>None\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.update_header","title":"<code>update_header(endpoint: NxtEndpoint = None) -&gt; None</code>","text":"<p>Update header for subsequent requests based on the given endpoint.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.update_header--parameters","title":"Parameters","text":"<pre><code>endpoint : NxtEndpoint, optional\n    The endpoint type for which to update the header. Defaults to None.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.update_header--returns","title":"Returns","text":"<pre><code>None\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.create_autorisation","title":"<code>create_autorisation(client_id: str, client_secret: str) -&gt; None</code>","text":"<p>Create authorization using client ID and client secret.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.create_autorisation--parameters","title":"Parameters","text":"<pre><code>client_id : str\n    The client ID.\nclient_secret :str\n    The client secret.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.create_autorisation--returns","title":"Returns","text":"<pre><code>None\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get_bearer_token","title":"<code>get_bearer_token() -&gt; bool</code>","text":"<p>Retrieve a bearer token from the server.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get_bearer_token--returns","title":"Returns","text":"<pre><code>bool\n    True if the token was successfully retrieved, False otherwise.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get_bearer_token--raises","title":"Raises","text":"<pre><code>NxtTokenException\n    If an error occurs during the token retrieval.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_enrichment","title":"<code>run_enrichment(endpoint: NxtEndpoint, data: NxtEnrichmentRequest) -&gt; EnrichmentResponseType</code>","text":"<p>Run an enrichment request on the specified endpoint using the provided data.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_enrichment--parameter","title":"Parameter","text":"<pre><code>endpoint : NxtEndpoint\n    The endpoint to run the enrichment request on.\ndata : NxtEnrichmentRequest\n    The data containing the enrichment request.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_enrichment--raises","title":"Raises","text":"<pre><code>ValueError\n    If the specified HTTP method is not supported.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_enrichment--returns","title":"Returns","text":"<pre><code>EnrichmentResponseType\n    The EnrichmentResponseType object containing the response from the API call.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_nql","title":"<code>run_nql(endpoint: NxtEndpoint, data: NxtNqlApiExecuteRequest, method: Optional[str] = None) -&gt; NqlResponseType</code>","text":"<p>Run an NQL query on the specified endpoint using the provided data.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_nql--parameters","title":"Parameters","text":"<pre><code>endpoint : NxtEndpoint\n    The endpoint to run the NQL query on.\ndata NxtNqlApiExecuteRequest\n    The data containing the NQL query.\nmethod : Optional[str], optional\n    The HTTP method to use for the request. Defaults to 'POST'.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_nql--raises","title":"Raises","text":"<pre><code>ValueError\n    If the specified HTTP method is not supported.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.run_nql--returns","title":"Returns","text":"<pre><code>NqlResponseType\n    The nql response object containing the response from the API call.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.wait_status","title":"<code>wait_status(value: NxtNqlApiExportResponse, timeout: int = 300) -&gt; Union[NxtNqlApiStatusResponse, NxtErrorResponse]</code>","text":"<p>Wait for the status of an NQL API export request to complete.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.wait_status--parameters","title":"Parameters","text":"<pre><code>value : NxtNqlApiExportResponse\n    The export request to check the status of.\ntimeout : int, optional\n    The maximum time to wait for the status to complete. Defaults to 300.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.wait_status--returns","title":"Returns","text":"<pre><code>Union[NxtNqlApiStatusResponse, NxtErrorResponse]\n    The final status response of the export request.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get_status_export","title":"<code>get_status_export(value: NxtNqlApiExportResponse) -&gt; NqlResponseType</code>","text":"<p>Retrieve the status of an export based on the provided NxtNqlApiExportResponse value.</p> <p>Constructs the export status URL and makes a GET request to fetch the status. Converts the response to a NxtNqlStatus object and returns it.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get_status_export--parameters","title":"Parameters","text":"<pre><code>value : NxtNqlApiExportResponse\n    The export response object containing export ID.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get_status_export--returns","title":"Returns","text":"<pre><code>NqlResponseType\n    The status of the export operation.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.download_export","title":"<code>download_export(value: NxtNqlApiStatusResponse, timeout: int = 300) -&gt; requests.models.Response</code>","text":"<p>Download an export file based on the NxtNqlApiStatusResponse value and a timeout period.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.download_export--parameters","title":"Parameters","text":"<pre><code>value : NxtNqlApiStatusResponse\n    The status response object containing the export details.\ntimeout : int, optional\n    The timeout period for the download request in seconds. Defaults to 300.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.download_export--returns","title":"Returns","text":"<pre><code>requests.models.Response\n    The response object from the download request.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.check_method","title":"<code>check_method(endpoint: NxtEndpoint, method: str) -&gt; bool</code>","text":"<p>Check if a given method is supported for a specific endpoint.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.check_method--parameters","title":"Parameters","text":"<pre><code>endpoint : NxtEndpoint\n    The endpoint to check the method for.\nmethod : str\n    The method to check.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.check_method--returns","title":"Returns","text":"<pre><code>bool\n    True if the method is supported, False otherwise.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get","title":"<code>get(endpoint: NxtEndpoint, params=None) -&gt; ResponseApiType</code>","text":"<p>Send a GET request to the specified endpoint with optional query parameters.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get--parameters","title":"Parameters","text":"<pre><code>endpoint : NxtEndpoint\n    The endpoint to send the request to.\nparams : Optional[Dict[str, Any]]\n    Query parameters to include in the request. Defaults to None.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get--returns","title":"Returns","text":"<pre><code>ResponseAPIType \n    The response object containing the status of the request.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.get--raises","title":"Raises","text":"<pre><code>requests.exceptions.RequestException\n    If there was an error sending the request.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.post","title":"<code>post(endpoint: NxtEndpoint, data: Union[NxtTokenRequest, NxtEnrichmentRequest, NxtNqlApiExecuteRequest]) -&gt; ResponseApiType</code>","text":"<p>Send a POST request to the specified endpoint with the provided data.</p>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.post--parameters","title":"Parameters","text":"<pre><code>endpoint : (NxtEndpoint\n    The endpoint to send the request to.\ndata : Union[NxtTokenRequest, NxtEnrichmentRequest, NxtNqlApiExecuteRequest])\n    The data to be sent in the request.\n</code></pre>"},{"location":"nxt_api_request/#nexthink_api.Clients.NxtApiClient.post--returns","title":"Returns","text":"<pre><code> ResponseAPIType \n    The response object containing the status of the POST request.\n</code></pre>"},{"location":"nxt_endpoint/","title":"API Endpoints","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint","title":"<code>nexthink_api.Models.NxtEndpoint</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Endpoint list of the Nexthink API.</p>"},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.Enrichment","title":"<code>Enrichment: Final[str] = '/api/v1/enrichment/data/fields'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.Act","title":"<code>Act: Final[str] = '/api/v1/act/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.Engage","title":"<code>Engage: Final[str] = '/api/v1/euf/campaign/trigger'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.Workflow","title":"<code>Workflow: Final[str] = '/api/v1/workflow/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.Nql","title":"<code>Nql: Final[str] = '/api/v1/nql/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.NqlV2","title":"<code>NqlV2: Final[str] = '/api/v2/nql/execute'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.NqlExport","title":"<code>NqlExport: Final[str] = '/api/v1/nql/export'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.NqlStatus","title":"<code>NqlStatus: Final[str] = '/api/v1/nql/status'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.Token","title":"<code>Token: Final[str] = '/api/v1/token'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.get_api_name","title":"<code>get_api_name(path: str) -&gt; Optional[str]</code>  <code>classmethod</code>","text":"<p>Get the API name from the path.</p>"},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.get_api_name--parameters","title":"Parameters","text":"<pre><code>path : str\n    path to the API.\n</code></pre>"},{"location":"nxt_endpoint/#nexthink_api.Models.NxtEndpoint.get_api_name--returns","title":"Returns","text":"<pre><code>Optional[str]\n    The name of the API or None if path is not in the Endpoints list.\n</code></pre>"},{"location":"nxt_invalid_token_request/","title":"Invalide Token Request","text":""},{"location":"nxt_invalid_token_request/#nexthink_api.Models.NxtInvalidTokenRequest","title":"<code>nexthink_api.Models.NxtInvalidTokenRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Error when authentication has failed.</p>"},{"location":"nxt_invalid_token_request/#nexthink_api.Models.NxtInvalidTokenRequest--attributes","title":"Attributes","text":"<pre><code>code: str\n    Error code\nmessage: str\n    Message with the description of the error\n</code></pre>"},{"location":"nxt_invalid_token_request/#nexthink_api.Models.NxtInvalidTokenRequest.code","title":"<code>code: str = Field(min_length=1, default=401)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_invalid_token_request/#nexthink_api.Models.NxtInvalidTokenRequest.message","title":"<code>message: str = Field(min_length=1, default='Unauthorized - invalid authentication credentials')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_region_name/","title":"Nexthink Regions for servers","text":""},{"location":"nxt_region_name/#nexthink_api.Models.NxtRegionName","title":"<code>nexthink_api.Models.NxtRegionName</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>List of regions for Nexthink servers.</p>"},{"location":"nxt_region_name/#nexthink_api.Models.NxtRegionName.us","title":"<code>us = 'us'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_region_name/#nexthink_api.Models.NxtRegionName.eu","title":"<code>eu = 'eu'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_region_name/#nexthink_api.Models.NxtRegionName.pac","title":"<code>pac = 'pac'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_region_name/#nexthink_api.Models.NxtRegionName.meta","title":"<code>meta = 'meta'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_response/","title":"Response manager","text":""},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse","title":"<code>nexthink_api.Clients.NxtResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Build different types of Nexthink API responses based on the provided Response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse--returns","title":"Returns","text":"<pre><code>ResponseType\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse--raises","title":"Raises","text":"<pre><code>NxtApiException\n    If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.response","title":"<code>response: ResponseApiType = Field(alias='value', default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.model_config","title":"<code>model_config = ConfigDict(populate_by_name=True, arbitrary_types_allowed=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.value","title":"<code>value: ResponseApiType</code>  <code>property</code>","text":"<p>Returns the value of the 'response' attribute.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.from_response","title":"<code>from_response(response: Response) -&gt; ResponseApiType</code>","text":"<p>Build a Nexthink API response based on the provided Response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.from_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.from_response--returns","title":"Returns","text":"<pre><code>ResponseAPIType\n    The built response.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.from_response--raises","title":"Raises","text":"<pre><code>NxtApiException\n    If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_enrichment_response","title":"<code>build_nxt_enrichment_response(response: Response) -&gt; EnrichmentResponseType</code>","text":"<p>Create Enrichment response based on the provided response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_enrichment_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_enrichment_response--returns","title":"Returns","text":"<pre><code>EnrichmentResponseType\n    The response object based on the status code of the given response.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_enrichment_response--raises","title":"Raises","text":"<pre><code>NxtApiException\n     If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_act_response","title":"<code>build_nxt_act_response(response: Response) -&gt; ActResponseType</code>","text":"<p>Create Act response based on the provided response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_act_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_act_response--returns","title":"Returns","text":"<pre><code>ActResponseType\n    The response object based on the status code of the given response.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_act_response--raises","title":"Raises","text":"<pre><code>NxtApiException\n    If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_workflow_response","title":"<code>build_nxt_workflow_response(response: Response) -&gt; WorkflowResponseType</code>","text":"<p>Create Workflow response based on the provided response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_workflow_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_workflow_response--returns","title":"Returns","text":"<pre><code>WorkflowResponseType\n    The response object based on the status code of the given response.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_workflow_response--raises","title":"Raises","text":"<pre><code>NxtApiException\n    If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_engage_response","title":"<code>build_nxt_engage_response(response: Response) -&gt; CampaignResponseType</code>","text":"<p>Create Engage response based on the provided response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_engage_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_engage_response--returns","title":"Returns","text":"<pre><code>CampaignResponseType\n    The response object based on the status code of the given response.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_engage_response--raises","title":"Raises","text":"<pre><code>NxtApiException\n    If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_nql_response","title":"<code>build_nxt_nql_response(response: Response) -&gt; NqlResponseType</code>","text":"<p>Create Nql response based on the provided response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_nql_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_nql_response--returns","title":"Returns","text":"<pre><code>NqlResponseType\n    The response object based on the status code of the given response.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_nql_response--raises","title":"Raises","text":"<pre><code>NxtApiException\n    If the status code is not one of the expected values.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_token_response","title":"<code>build_nxt_token_response(response: Response) -&gt; NxtTokenResponse</code>","text":"<p>Create a Token response based on the provided response object.</p>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_token_response--parameters","title":"Parameters","text":"<pre><code>response : Response\n    The response object to build the Token response from.\n</code></pre>"},{"location":"nxt_response/#nexthink_api.Clients.NxtResponse.build_nxt_token_response--returns","title":"Returns","text":"<pre><code>NxtTokenResponse\n    The Token response object.\n</code></pre>"},{"location":"nxt_settings/","title":"Nexthink settings","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings","title":"<code>nexthink_api.Models.NxtSettings</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration class for Nexthink API.</p> <p>This class is used by client during initialization.</p>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings--attributes","title":"Attributes","text":"<pre><code>instance : str\n    The name of the Nexthink instance.\nregion : NxtRegionName\n    The region of the Nexthink instance.\ninfinity_base_uri : HttpUrl\n    The base URI of the Nexthink API.\ntoken_url : HttpUrl\n    The URL of the token endpoint.\nproxies : Optional[dict]\n    A dictionary of proxies to use for the requests. Defaults to None.\n</code></pre>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings--note","title":"Note","text":"<ul> <li>if proxy are not provided, it will try to detect proxies from environment variables</li> <li>if no proxy are detected, it will disable the proxy</li> <li>false value disable the proxy</li> </ul>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.base_url","title":"<code>base_url: Final = 'https://{instance}.api.{region}.nexthink.cloud'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.instance","title":"<code>instance: str = Field(min_length=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.region","title":"<code>region: NxtRegionName</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.infinity_base_uri","title":"<code>infinity_base_uri: HttpUrl = Field(init=False, default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.token_url","title":"<code>token_url: HttpUrl = Field(init=False, default=None)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.proxies","title":"<code>proxies: Optional[Union[Dict[str, str], bool]] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.set_infinity_base_uri","title":"<code>set_infinity_base_uri(values: dict) -&gt; dict</code>  <code>classmethod</code>","text":"<p>Set the base URI of the Nexthink API.</p>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.set_infinity_base_uri--parameters","title":"Parameters","text":"<pre><code>values : dict\n    class attributes in dict format\n</code></pre>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.set_infinity_base_uri--returns","title":"Returns","text":"<pre><code>dict\n    The validated and updated attributes in dict format.\n</code></pre>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.set_infinity_base_uri--raises","title":"Raises","text":"<pre><code>ValueError\n    If instance or region are not provided.\n</code></pre>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.set_settings_init","title":"<code>set_settings_init() -&gt; Self</code>","text":"<p>Finish the initialization of the settings object when class is instantiated.</p>"},{"location":"nxt_settings/#nexthink_api.Models.NxtSettings.set_settings_init--returns","title":"Returns","text":"<pre><code>NxtSettings\n    the instantiated class\n</code></pre>"},{"location":"nxt_token_request/","title":"Token Request","text":""},{"location":"nxt_token_request/#nexthink_api.Models.NxtTokenRequest","title":"<code>nexthink_api.Models.NxtTokenRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model for an OAuth Authentication request on the Nexthink API.</p>"},{"location":"nxt_token_request/#nexthink_api.Models.NxtTokenRequest--attributes","title":"Attributes","text":"<pre><code>data (Dict[str, str]):\n    Header for requesting the Token\n</code></pre>"},{"location":"nxt_token_request/#nexthink_api.Models.NxtTokenRequest.data","title":"<code>data: Dict[str, str] = Field(default={'grant_type': 'client_credentials'}, frozen=True)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"nxt_token_request/#nexthink_api.Models.NxtTokenRequest.get_request_header","title":"<code>get_request_header() -&gt; dict</code>","text":"<p>Return the header for requesting the token.</p>"},{"location":"nxt_token_request/#nexthink_api.Models.NxtTokenRequest.get_request_header--returns","title":"Returns","text":"<pre><code>dict(str, str):\n    Header for requesting the Token\n</code></pre>"},{"location":"nxt_token_response/","title":"Token Response","text":""},{"location":"nxt_token_response/#nexthink_api.Models.NxtTokenResponse","title":"<code>nexthink_api.Models.NxtTokenResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Nexthink API Token answer.</p>"},{"location":"nxt_token_response/#nexthink_api.Models.NxtTokenResponse--attributes","title":"Attributes","text":"<pre><code>token_type : str\n    The type of the token.\nexpires_in : int\n    The expiration time of the token.\naccess_token str\n    The access token.\nscope : str\n    The scope of the token.\n</code></pre>"},{"location":"nxt_token_response/#nexthink_api.Models.NxtTokenResponse.token_type","title":"<code>token_type: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_token_response/#nexthink_api.Models.NxtTokenResponse.expires_in","title":"<code>expires_in: Annotated[int, Field(ge=0)]</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_token_response/#nexthink_api.Models.NxtTokenResponse.access_token","title":"<code>access_token: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""},{"location":"nxt_token_response/#nexthink_api.Models.NxtTokenResponse.scope","title":"<code>scope: Annotated[str, Field(min_length=1)]</code>  <code>instance-attribute</code>","text":""}]}